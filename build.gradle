buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
    }
}

plugins {
    id "java"
    id "com.google.protobuf" version "0.8.5"
}

group 'tester'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.1.0'
    // https://mvnrepository.com/artifact/com.google.guava/guava
    compile group: 'com.google.guava', name: 'guava', version: '25.1-jre'
    // https://mvnrepository.com/artifact/org.hdrhistogram/HdrHistogram
    compile group: 'org.hdrhistogram', name: 'HdrHistogram', version: '2.1.4'
    // https://mvnrepository.com/artifact/io.netty/netty-all
//    compile group: 'io.netty', name: 'netty-all', version: '4.1.25.Final'
    // https://mvnrepository.com/artifact/io.netty/netty-transport-native-kqueue
//    compile group: 'io.netty', name: 'netty-transport-native-kqueue', version: '4.1.22.Final'
    compile 'com.google.protobuf:protobuf-java:3.0.0-beta-1'
    // https://mvnrepository.com/artifact/io.grpc/grpc-all
    compile group: 'io.grpc', name: 'grpc-all', version: '1.11.0'
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
        }
        java {
            // include self written and generated code
            srcDirs 'src/main/java', 'generated-sources/main/java', 'generated-sources/main/grpc'
        }
    }
    // remove the test configuration - at least in your example you don't have a special test proto file
}

protobuf {
    plugins {
        // Define a plugin with name 'grpc'
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0-pre2'
            // or
            // path = 'tools/protoc-gen-grpc-java'
        }
    }
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.0.0-alpha-3'
    }

    generateProtoTasks.generatedFilesBaseDir = 'generated-sources'

    generateProtoTasks {
        // all() returns the collection of all protoc tasks
        all().each { task ->
            // Here you can configure the task
            task.plugins {
                // Add grpc output without any option.  grpc must have been defined in the
                // protobuf.plugins block.
                // This yields
                // "--grpc_out=/path/to/output" on the protoc commandline.
                grpc { }
            }
        }

        // In addition to all(), you may get the task collection by various
        // criteria:

        // (Java only) returns tasks for a sourceSet
        ofSourceSet('main')
    }
}